const postCodeChecker = require('./postCodeChecker')

test('Checks that the value passed to the postcode field contains letters and numbers and is of the right length', () => {
    expect(postCodeChecker('')).toBe(false)
    expect(postCodeChecker('"@Â£$%^& ')).toBe(false)
    expect(postCodeChecker('m12')).toBe(false)
    expect(postCodeChecker('@ld2')).toBe(false)
    expect(postCodeChecker('m 4 5k ')).toBe(false)
    expect(postCodeChecker('M 4 587MH4 ')).toBe(false)
    expect(postCodeChecker('M12 3FD')).toBe(true)
    expect(postCodeChecker('m123fd')).toBe(true)
    expect(postCodeChecker('MM1F 3FD')).toBe(true)
})

test("Checks that the value passed to the postcode field doesn't contain Q, V & X in the first position", () => {
    expect(postCodeChecker('Q12 3FD')).toBe(false)
    expect(postCodeChecker('V12 3FD')).toBe(false)
    expect(postCodeChecker('X12 3FD')).toBe(false)
})

test("Checks that the value passed to the postcode field doesn't contain I, J and Z in the second position", () => {
    expect(postCodeChecker('MI2 3FD')).toBe(false)
    expect(postCodeChecker('MJ2 3FD')).toBe(false)
    expect(postCodeChecker('MZ2 3FD')).toBe(false)
})

test('Checks that the value passed to the postcode field contains A, B, C, D, E, F, G, H, J, K, S, T, U and W or 0 - 9 in the third position', () => {
    expect(postCodeChecker('M12 3FD')).toBe(true)
    expect(postCodeChecker('M19 3FD')).toBe(true)
    expect(postCodeChecker('M1A 3FD')).toBe(true)
    expect(postCodeChecker('M1B 3FD')).toBe(true)
    expect(postCodeChecker('M1C 3FD')).toBe(true)
    expect(postCodeChecker('M1D 3FD')).toBe(true)
    expect(postCodeChecker('M1E 3FD')).toBe(true)
    expect(postCodeChecker('M1F 3FD')).toBe(true)
    expect(postCodeChecker('M1G 3FD')).toBe(true)
    expect(postCodeChecker('M1H 3FD')).toBe(true)
    expect(postCodeChecker('M1J 3FD')).toBe(true)
    expect(postCodeChecker('M1K 3FD')).toBe(true)
    expect(postCodeChecker('M1S 3FD')).toBe(true)
    expect(postCodeChecker('M1T 3FD')).toBe(true)
    expect(postCodeChecker('M1U 3FD')).toBe(true)
    expect(postCodeChecker('M1W 3FD')).toBe(true)
})

test("Checks that the final three letters passed to the postcode field don't contain these letters: A, B, C, D, E, F, G, H, J, K, S, T, U and W", () => {
    expect(postCodeChecker('M12 CFD')).toBe(false)
    expect(postCodeChecker('M12 IFD')).toBe(false)
    expect(postCodeChecker('M12 KFD')).toBe(false)
    expect(postCodeChecker('M12 MFD')).toBe(false)
    expect(postCodeChecker('M12 OFD')).toBe(false)
    expect(postCodeChecker('M12 VFD')).toBe(false)
    expect(postCodeChecker('M12 3CD')).toBe(false)
    expect(postCodeChecker('M12 3ID')).toBe(false)
    expect(postCodeChecker('M12 3KD')).toBe(false)
    expect(postCodeChecker('M12 3MD')).toBe(false)
    expect(postCodeChecker('M12 3OD')).toBe(false)
    expect(postCodeChecker('M12 3VD')).toBe(false)
    expect(postCodeChecker('M12 3FC')).toBe(false)
    expect(postCodeChecker('M12 3FI')).toBe(false)
    expect(postCodeChecker('M12 3FK')).toBe(false)
    expect(postCodeChecker('M12 3FM')).toBe(false)
    expect(postCodeChecker('M12 3FO')).toBe(false)
    expect(postCodeChecker('M12 3FV')).toBe(false)
})

test('Checks that the postcode passed in is valid - the correct amount of combined numbers and letters', () => {
    expect(postCodeChecker('AA9A 9AA')).toBe(true)
    expect(postCodeChecker('A9A 9AA')).toBe(true)
    expect(postCodeChecker('A9 9AA')).toBe(true)
    expect(postCodeChecker('A99 9AA')).toBe(true)
    expect(postCodeChecker('AA9 9AA')).toBe(true)
    expect(postCodeChecker('AA99 9AA')).toBe(true)
})